(let = s:vimlparser (vimlparser#import))
(function (s:run)
  (let = src (list 'function! s:test1()' '  imap <expr> <Tab> dummy#expr() ?' '\ "\<Plug>(dummy1)" : "\<Tab>"' 'endfunction' '' 'function! s:test2()' '  imap <expr> <Tab> dummy#expr() ?' '  \ "\<Plug>(dummy2)"' '  \ : "\<Tab>"' 'endfunction'))
  (let = r ((dot (dot s:vimlparser StringReader) new) src))
  (let = p ((dot (dot s:vimlparser VimLParser) new) 0))
  (let = c ((dot (dot s:vimlparser Compiler) new)))
  (let = toplevel ((dot p parse) r))
  (let = func (subscript (dot toplevel body) 0))
  (let = body (s:extract_body func src))
  (call (writefile (split body "\n") 'test/test_source.got'))
  (excmd "qall!"))
(function (s:extract_body func src)
  (let = pos (dot a:func pos))
  ; FIXME calculating endpos is workaround. Ideally, it should have the end
  ; position of the node.
  (let = endpos (dot (dot a:func endfunction) pos))
  (let = endfunc (dot (dot a:func endfunction) ea))
  (let = cmdlen (- (dot (dot endfunc argpos) i) (dot (dot endfunc cmdpos) i)))
  (let += (dot endpos i) cmdlen)
  (return (join (map (split (join a:src "\n") '\zs') 'v:val[pos.i : endpos.i]') '')))
(call (s:run))
